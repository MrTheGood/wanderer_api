// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Starlord.Data;

namespace Project_Starlord.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20200104132725_change-seed-data")]
    partial class changeseeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project_Starlord.Models.FollowerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Followers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FollowedId = 2,
                            FollowerId = 1
                        });
                });

            modelBuilder.Entity("Project_Starlord.Models.PinPointModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("PinPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 50000000000000m,
                            Longitude = 20000000000000m,
                            Sequence = 1,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(7673),
                            TripId = 1
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 40000000000000m,
                            Longitude = 60000000000000m,
                            Sequence = 3,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9166),
                            TripId = 1
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 300000000000000m,
                            Longitude = 12000000000000m,
                            Sequence = 2,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9204),
                            TripId = 1
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 280000000000000m,
                            Longitude = 47000000000000m,
                            Sequence = 4,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9207),
                            TripId = 1
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 792000000000000m,
                            Longitude = 147000000000000m,
                            Sequence = 2,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9210),
                            TripId = 2
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 123000000000000m,
                            Longitude = 862000000000000m,
                            Sequence = 1,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9216),
                            TripId = 2
                        },
                        new
                        {
                            Id = 7,
                            Latitude = 1200000000000000m,
                            Longitude = 1300000000000000m,
                            Sequence = 3,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9218),
                            TripId = 2
                        },
                        new
                        {
                            Id = 8,
                            Latitude = 51000000000000m,
                            Longitude = 4000000000000m,
                            Sequence = 1,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9221),
                            TripId = 3
                        },
                        new
                        {
                            Id = 9,
                            Latitude = 55000000000000m,
                            Longitude = 18000000000000m,
                            Sequence = 3,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9224),
                            TripId = 3
                        },
                        new
                        {
                            Id = 10,
                            Latitude = 56000000000000m,
                            Longitude = 12000000000000m,
                            Sequence = 4,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9228),
                            TripId = 3
                        },
                        new
                        {
                            Id = 11,
                            Latitude = 51000000000000m,
                            Longitude = 4000000000000m,
                            Sequence = 2,
                            Timestamp = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(9232),
                            TripId = 3
                        });
                });

            modelBuilder.Entity("Project_Starlord.Models.ResetTokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTokenUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetTokens");
                });

            modelBuilder.Entity("Project_Starlord.Models.TripModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimestampFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TimestampFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimestampTo = new DateTime(2020, 1, 4, 14, 27, 25, 7, DateTimeKind.Local).AddTicks(4487),
                            TripName = "trip1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            TimestampFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimestampTo = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(5670),
                            TripName = "trip2",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            TimestampFrom = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(5718),
                            TimestampTo = new DateTime(2020, 1, 4, 14, 27, 25, 9, DateTimeKind.Local).AddTicks(5723),
                            TripName = "Tyas zijn vakantie",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Project_Starlord.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "007@hr.nl",
                            Password = "SnpFKor8blt7TiI+PxWXMO/KXWTn+ahQ28DrkdCMAmPGVZMS",
                            Username = "SecretAgent"
                        },
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.nl",
                            Password = "/kTY0LJqs2bRIB/dmzvvNwpmKPqZjc9A3WQBCE5cZJzSuM86",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("Project_Starlord.Models.PinPointModel", b =>
                {
                    b.HasOne("Project_Starlord.Models.TripModel", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
